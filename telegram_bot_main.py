import os
import logging
from datetime import datetime
from typing import List

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# === Import c√°c module ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p ===
# L∆∞u √Ω: c√°c file n√†y c·∫ßn n·∫±m c√πng th∆∞ m·ª•c v·ªõi file main n√†y
from cang_dao import clean_numbers_input as clean_nums_cang, ghep_cang, dao_so
from phongthuy import (
    phongthuy_tudong,
    get_can_chi_ngay,
    chuan_hoa_can_chi,
    sinh_so_hap_cho_ngay,
    chot_so_format,
)
from ungho import ung_ho_gop_y
from xien import clean_numbers_input as clean_nums_xien, gen_xien, format_xien_result

# =========================
# Logging
# =========================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# =========================
# Helpers
# =========================

def main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üî¢ Gh√©p C√†ng", callback_data="menu_cang"),
            InlineKeyboardButton("üîÄ ƒê·∫£o S·ªë", callback_data="menu_dao"),
        ],
        [
            InlineKeyboardButton("üéØ Xi√™n n", callback_data="menu_xien"),
            InlineKeyboardButton("üîÆ Phong Th·ªßy", callback_data="menu_phongthuy"),
        ],
        [
            InlineKeyboardButton("üìå Ch·ªët s·ªë h√¥m nay", callback_data="menu_chotso"),
        ],
        [
            InlineKeyboardButton("üíñ ·ª¶ng h·ªô & g√≥p √Ω", callback_data="menu_ungho"),
        ],
    ])


def menu_text() -> str:
    return (
        "üëã *Ch√†o m·ª´ng ƒë·∫øn v·ªõi tr·ª£ l√Ω s·ªë!*\n\n"
        "Ch·ªçn t√≠nh nƒÉng b√™n d∆∞·ªõi ho·∫∑c d√πng c√°c l·ªánh:\n"
        "‚Ä¢ /cang ‚Äì Gh√©p c√†ng v√†o d√†n s·ªë\n"
        "‚Ä¢ /dao ‚Äì ƒê·∫£o s·ªë (ho√°n v·ªã 2‚Äì6 ch·ªØ s·ªë)\n"
        "‚Ä¢ /xien ‚Äì Gh√©p xi√™n n t·ª´ d√†n\n"
        "‚Ä¢ /phongthuy ‚Äì Tra phong th·ªßy ng√†y/can chi\n"
        "‚Ä¢ /chotso ‚Äì G·ª£i √Ω ch·ªët s·ªë theo ng√†y hi·ªán t·∫°i\n"
        "‚Ä¢ /ungho ‚Äì ·ª¶ng h·ªô & g√≥p √Ω\n"
        "‚Ä¢ /help ‚Äì H∆∞·ªõng d·∫´n chi ti·∫øt"
    )


# =========================
# Command Handlers
# =========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(menu_text(), parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_keyboard())


ASYNC_GUIDES = {
    "cang": (
        "*Gh√©p C√†ng*\n"
        "G·ª≠i theo 1 trong c√°c c√°ch:\n"
        "1) `cang: 1 2 3` xu·ªëng d√≤ng d√†n s·ªë\n"
        "   V√≠ d·ª•:\n"
        "   cang: 1 3\n"
        "   12 34 567\n\n"
        "2) G√µ tr·ª±c ti·∫øp: `1,3 | 12 34 567` (tr∆∞·ªõc d·∫•u | l√† danh s√°ch c√†ng)\n"
    ),
    "dao": (
        "*ƒê·∫£o S·ªë*\n"
        "G·ª≠i 1 s·ªë c√≥ 2‚Äì6 ch·ªØ s·ªë ƒë·ªÉ t·∫°o m·ªçi ho√°n v·ªã.\n"
        "V√≠ d·ª•: `123` ho·∫∑c `0123`."
    ),
    "xien": (
        "*Xi√™n n*\n"
        "C√∫ ph√°p: \n`/xien n` r·ªìi xu·ªëng d√≤ng nh·∫≠p d√†n s·ªë (m·ªói s·ªë >= 2 ch·ªØ s·ªë).\n"
        "V√≠ d·ª•:\n/xien 3\n11 22 33 44 55"
    ),
    "phongthuy": (
        "*Phong th·ªßy theo ng√†y/can chi*\n"
        "G·ª≠i ng√†y d∆∞∆°ng \\(vd: 2024-07-25, 25/07, 25-07-2024\\) _ho·∫∑c_ g·ª≠i tr·ª±c ti·∫øp can chi \\(Gi√°p T√Ω, Qu√Ω H·ª£i\\).\n"
        "Ngo√†i ra c√≥ th·ªÉ ƒë∆°n gi·∫£n g√µ \"h√¥m nay\" ho·∫∑c g·ª≠i ng√†y b·∫•t k·ª≥."
    ),
    "chotso": (
        "*Ch·ªët s·ªë h√¥m nay*\n"
        "D·ª±a tr√™n can chi ng√†y hi·ªán t·∫°i v√† b·ªô s·ªë h·∫°p. Kh√¥ng ph·∫£i khuy·∫øn ngh·ªã t√†i ch√≠nh."
    ),
}


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "\n\n".join(ASYNC_GUIDES.values())
    if update.message:
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == "menu":
        await q.edit_message_text(menu_text(), parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_keyboard())
        return
    if data == "menu_ungho":
        # Reuse handler from ungho.py
        await ung_ho_gop_y(update, context)
        return

    guide_map = {
        "menu_cang": ASYNC_GUIDES["cang"],
        "menu_dao": ASYNC_GUIDES["dao"],
        "menu_xien": ASYNC_GUIDES["xien"],
        "menu_phongthuy": ASYNC_GUIDES["phongthuy"],
        "menu_chotso": ASYNC_GUIDES["chotso"],
    }
    guide = guide_map.get(data, menu_text())
    await q.edit_message_text(guide, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Tr·ªü v·ªÅ menu", callback_data="menu")]]))


# --------- /cang ---------
async def cang_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gh√©p c√†ng v√†o d√†n s·ªë.
    H·ªó tr·ª£ 2 ki·ªÉu: (1) 'cang: 1 2 3' r·ªìi xu·ªëng d√≤ng d√†n s·ªë; (2) '1,2 | 12 34 567'.
    """
    if not update.message:
        return
    text = (update.message.text or "").replace("/cang", "").strip()
    if not text:
        await update.message.reply_text(ASYNC_GUIDES["cang"], parse_mode=ParseMode.MARKDOWN)
        return

    cangs: List[str] = []
    body = text

    # Ki·ªÉu 1: cang: ... \n <dan>
    if "cang:" in text.lower():
        parts = text.split("\n", 1)
        header = parts[0]
        body = parts[1] if len(parts) > 1 else ""
        cang_part = header.split(":", 1)[1]
        cangs = [x for x in cang_part.replace(",", " ").split() if x.isdigit() and len(x) == 1]
    # Ki·ªÉu 2: 1 2 3 | 12 34 567
    elif "|" in text:
        left, right = text.split("|", 1)
        cangs = [x for x in left.replace(",", " ").split() if x.isdigit() and len(x) == 1]
        body = right

    numbers = clean_nums_cang(body)
    if not numbers:
        await update.message.reply_text("‚ùó Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d√†n s·ªë h·ª£p l·ªá.")
        return

    cang_str = " ".join(cangs) if cangs else "0"
    res = ghep_cang(numbers, cang_str)
    # T·ª± chia d√≤ng cho d·ªÖ ƒë·ªçc
    chunk = 25
    lines = [", ".join(res[i:i+chunk]) for i in range(0, len(res), chunk)]
    reply = "*K·∫øt qu·∫£ gh√©p c√†ng:*\n" + "\n".join(lines)
    await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


# --------- /dao ---------
async def dao_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = (update.message.text or "").replace("/dao", "").strip()
    if not text:
        await update.message.reply_text(ASYNC_GUIDES["dao"], parse_mode=ParseMode.MARKDOWN)
        return
    target = "".join([c for c in text if c.isdigit()])
    perms = dao_so(target)
    if not perms:
        await update.message.reply_text("‚ùó Vui l√≤ng g·ª≠i 1 s·ªë c√≥ 2‚Äì6 ch·ªØ s·ªë.")
        return
    chunk = 40
    lines = [", ".join(perms[i:i+chunk]) for i in range(0, len(perms), chunk)]
    await update.message.reply_text("*C√°c ho√°n v·ªã:*\n" + "\n".join(lines), parse_mode=ParseMode.MARKDOWN)


# --------- /xien ---------
async def xien_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    parts = (update.message.text or "").split("\n", 1)
    header = parts[0]
    body = parts[1] if len(parts) > 1 else ""

    toks = header.split()
    if len(toks) < 2:
        await update.message.reply_text(ASYNC_GUIDES["xien"], parse_mode=ParseMode.MARKDOWN)
        return
    try:
        n = int(toks[1])
    except Exception:
        await update.message.reply_text("‚ùó C√∫ ph√°p sai. V√≠ d·ª•: /xien 3\n11 22 33 44 55", parse_mode=ParseMode.MARKDOWN)
        return

    numbers = clean_nums_xien(body)
    combos = gen_xien(numbers, n)
    result = format_xien_result(combos)
    await update.message.reply_text(result, parse_mode=ParseMode.MARKDOWN)


# --------- /phongthuy ---------
async def phongthuy_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = (update.message.text or "").replace("/phongthuy", "").strip()
    if not text:
        await update.message.reply_text(ASYNC_GUIDES["phongthuy"], parse_mode=ParseMode.MARKDOWN)
        return
    reply = phongthuy_tudong(text)
    await update.message.reply_text(reply)


# --------- /chotso ---------
async def chotso_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    from datetime import datetime
    today = datetime.now()
    y, m, d = today.year, today.month, today.day
    can_chi = chuan_hoa_can_chi(get_can_chi_ngay(y, m, d))
    sohap_info = sinh_so_hap_cho_ngay(can_chi)
    reply = chot_so_format(can_chi, sohap_info, today.strftime("%d-%m-%Y"))
    await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


# --------- /ungho ---------
async def ungho_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ung_ho_gop_y(update, context)


# --------- Fallbacks ---------
async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Nh·∫≠n di·ªán nhanh m·ªôt s·ªë input t·ª± do: n·∫øu l√† ng√†y/can chi -> phong th·ªßy."""
    if not update.message:
        return
    t = (update.message.text or "").strip()
    # N·∫øu ng∆∞·ªùi d√πng g√µ "h√¥m nay"
    if t.lower() in {"hom nay", "h√¥m nay", "today"}:
        await chotso_cmd(update, context)
        return
    # N·∫øu c√≥ v·∫ª l√† ng√†y/can chi th√¨ x·ª≠ l√Ω phong th·ªßy
    reply = phongthuy_tudong(t)
    if not reply.startswith("‚ùó") and not reply.startswith("‚ùì"):
        await update.message.reply_text(reply)
    else:
        await update.message.reply_text(menu_text(), parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_keyboard())


# =========================
# Bootstrapping
# =========================

def build_application() -> Application:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("Missing env BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()

    # Commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("cang", cang_cmd))
    app.add_handler(CommandHandler("dao", dao_cmd))
    app.add_handler(CommandHandler("xien", xien_cmd))
    app.add_handler(CommandHandler("phongthuy", phongthuy_cmd))
    app.add_handler(CommandHandler("chotso", chotso_cmd))
    app.add_handler(CommandHandler("ungho", ungho_cmd))

    # Menu callbacks
    app.add_handler(CallbackQueryHandler(menu_callback))

    # Text router (after commands)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    return app


def main():
    app = build_application()
    logger.info("Bot started. Press Ctrl+C to stop.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
